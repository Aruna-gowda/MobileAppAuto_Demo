name: Appium Python Mobile Automation

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  setup-run-publish:
    runs-on: macos-latest

    env:
      # Set environment variables for Android SDK, Java, and other tools
      JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home
      # ANDROID_HOME: $HOME/Library/Android/sdk
      # PATH: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Java JDK
      - name: Set up Java JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # # Install Android SDK command-line tools
      # - name: Install Android SDK command-line tools
      #   run: |
      #     mkdir -p $ANDROID_HOME/cmdline-tools
      #     curl -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-mac-8092744_latest.zip
      #     unzip commandlinetools.zip -d $ANDROID_HOME/cmdline-tools
      #     mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest

      # # Install Android SDK components
      # - name: Install Android SDK components
      #   run: |
      #     echo "Setting up Android SDK"
      #     sdkmanager --install "platform-tools" "platforms;android-30" "build-tools;30.0.3"
      #     sdkmanager --install "system-images;android-30;google_apis;x86_64"
      #     sdkmanager --licenses
      #     avdmanager create avd -n test_avd -k "system-images;android-30;google_apis;x86_64" --force
      #     emulator -avd test_avd -no-snapshot -no-audio -no-window &

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-python-commons allure-behave

      # Install Appium and drivers
      - name: Install Appium and drivers
        run: |
          npm install -g appium appium-doctor
          appium driver install uiautomator2
          appium driver install xcuitest

      # Run Appium tests
      - name: Run Appium tests
        run: |
          appium & # Start Appium server
          python -m pytest --alluredir=allure-results # Run tests and store Allure results

      # Generate and store Allure report
      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report
        continue-on-error: true

      # Upload Allure report as an artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report
