name: Appium Python Mobile Automation

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  setup-run-publish:
    runs-on: macos-latest
	
  	env:
  	  ANDROID_ARCH: arm64-v8a  # Changed from x86_64 to arm64-v8a
  	  ANDROID_TARGET: google_apis_playstore
  	  API_LEVEL: 33
  	  ANDROID_BUILD_TOOLS_VERSION: 33.0.2
  	  ANDROID_SDK_PACKAGES: system-images;android-33;google_apis_playstore;arm64-v8a platforms;android-33 build-tools;33.0.2 platform-tools emulator
  	  EMULATOR_TIMEOUT: 100
  	  EMULATOR_NAME: nexus

    # env:
    #   # Set environment variables for Android SDK, Java, and other tools
    #   JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home
    #   ANDROID_HOME: $HOME/Library/Android/sdk
    #   PATH: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$PATH

    steps:
      # Check for tar installation
      - name: Check tar installation
        run: |
          which tar
          tar --version

      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-python-commons allure-behave

      # Set up Java JDK
      - name: Set up Java JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Set up Node.js and npm
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install Appium and related tools via npm
      - name: Install Appium and drivers
        run: |
          npm install -g appium appium-doctor
          # appium-doctor --android
          # appium-doctor --ios
          appium driver install uiautomator2
          appium driver install xcuitest
		  
	  - name: Add avdmanager and sdkmanager to system PATH
        run: |
            echo "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/${{ env.ANDROID_BUILD_TOOLS_VERSION }}" >> $GITHUB_PATH

      - name: Install SDK
        run: |
           yes Y | sdkmanager --licenses
           sdkmanager --install ${ANDROID_SDK_PACKAGES}
  
      - name: Build Emulator
        run: |
            echo "no" | avdmanager --verbose create avd --force -n $EMULATOR_NAME --abi "${ANDROID_TARGET}/${ANDROID_ARCH}" -k "system-images;android-${API_LEVEL};${ANDROID_TARGET};${ANDROID_ARCH}"

      # # Set up Android SDK and emulator
      # - name: Set up Android SDK and create Android Emulator
      #   run: |
      #     echo "Setting up Android SDK"
      #     sdkmanager --install "platform-tools" "platforms;android-30" "build-tools;30.0.3"
      #     sdkmanager --install "system-images;android-30;google_apis;x86_64"
      #     sdkmanager --licenses
      #     avdmanager create avd -n test_avd -k "system-images;android-30;google_apis;x86_64" --force
      #     emulator -avd test_avd -no-snapshot -no-audio -no-window &

      # Set up Xcode simulator
      - name: Set up Xcode Simulator
        run: |
          sudo xcodebuild -license accept
          xcrun simctl boot "iPhone 14" # Booting iPhone simulator

      # Run Appium tests
      - name: Run Appium tests
        run: |
          appium & # Start Appium server
          python -m pytest --alluredir=allure-results # Run tests and store Allure results

      # Generate and store Allure report
      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report
        continue-on-error: true

      # Upload Allure report as an artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report
