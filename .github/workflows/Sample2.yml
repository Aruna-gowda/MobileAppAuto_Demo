name: Appium Python Mobile Automation

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  setup-run-publish:
    runs-on: macos-latest
    env:
      JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home
      ANDROID_HOME: /Users/runner/Library/Android/sdk
      NODEJS_HOME: /usr/local/bin/node
      NPM_HOME: /usr/local/bin/npm
      ALLURE_HOME: /usr/local/Cellar/allure/2.17.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # - name: Set environment variables
      #   run: |
      #     export PATH=$PATH:$JAVA_HOME/bin
      #     export PATH=$PATH:$ANDROID_HOME/tools
      #     export PATH=$PATH:$ANDROID_HOME/platform-tools
      #     export PATH=$PATH:$ANDROID_HOME/build-tools/29.0.2
      #     export PATH=$PATH:$NODEJS_HOME
      #     export PATH=$PATH:$NPM_HOME
      #     export PATH=$PATH:$ALLURE_HOME/bin

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-python-commons allure-behave

      - name: Setup Android SDK
        run: |
        # Install AVD files
          yes | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-29;default;x86_64'
          yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
          # Create emulator
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n Pixel_API_29_AOSP -d pixel --package 'system-images;android-29;default;x86_64' --force
          $ANDROID_HOME/emulator/emulator -list-avds
          emulator_config=~/.android/avd/Pixel_API_29_AOSP.avd/config.ini
          # The following madness is to support empty OR populated config.ini files,
          # the state of which is dependant on the version of the emulator used (which we don't control),
          # so let's be defensive to be safe.
          # Replace existing config (NOTE we're on MacOS so sed works differently!)
          sed -i .bak 's/hw.lcd.density=.*/hw.lcd.density=420/' "$emulator_config"
          sed -i .bak 's/hw.lcd.height=.*/hw.lcd.height=1920/' "$emulator_config"
          sed -i .bak 's/hw.lcd.width=.*/hw.lcd.width=1080/' "$emulator_config"
          # Or, add new config
          if ! grep -q "hw.lcd.density" "$emulator_config"; then
            echo "hw.lcd.density=420" >> "$emulator_config"
          fi
          if ! grep -q "hw.lcd.height" "$emulator_config"; then
            echo "hw.lcd.height=1920" >> "$emulator_config"
          fi
          if ! grep -q "hw.lcd.width" "$emulator_config"; then
            echo "hw.lcd.width=1080" >> "$emulator_config"
          fi
          echo "Emulator settings ($emulator_config)"
          cat "$emulator_config"
          echo "$ANDROID_HOME"
          sdkmanager --install "platform-tools" "platforms;android-29" "build-tools;29.0.2"
          avdmanager create avd --name test-emulator --device "pixel" --package "system-images;android-29;google_apis;x86"
          emulator -avd test-emulator -no-window -no-boot-anim &
          

      - name: Setup  envi for Android emulator
        run: |
          export ANDROID_HOME=/Users/runner/Library/Android/sdk
          export PATH=$PATH:$ANDROID_HOME/emulator
          export PATH=$PATH:$ANDROID_HOME/tools
          export PATH=$PATH:$ANDROID_HOME/tools/bin
          export PATH=$PATH:$ANDROID_HOME/platform-tools
        
      - name: Start Android emulator
        run: |
          # emulator -version
          echo "Starting emulator and waiting for boot to complete..."
          nohup $ANDROID_HOME/emulator/emulator -avd Pixel_API_29_AOSP -no-snapshot -no-window -no-audio -no-boot-anim -camera-back none -camera-front none -qemu -m 2048 > /dev/null 2>&1 &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
          echo "Emulator has finished booting"
          $ANDROID_HOME/platform-tools/adb devices
      

      - name: Install Appium and drivers
        run: |
          npm install -g appium appium-doctor
          appium driver install uiautomator2
          appium driver install xcuitest

      - name: Install Allure CLI
        run: |
          brew install allure

      - name: Set up and boot iPhone 14 simulator
        run: |
          xcrun simctl boot "iPhone 14"
          sleep 15

      - name: List Active iOS Simulators
        run: |
          echo "Active and Launched iOS Simulators:"
          xcrun simctl list devices | grep -E 'iPhone|iPad' | grep -E 'Booted|Shut Down' | awk -F '[()]' '{print $1}'

      - name: Run Appium tests
        run: |
          appium &
          sleep 5
          python -m pytest --alluredir=allure-results

      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report
        continue-on-error: true

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Deploy Allure Report to GitHub Pages
        if: success()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

      - name: Add link to Allure report in summary
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          echo "Allure Report is published here! View it [here])" >> $GITHUB_STEP_SUMMARY
