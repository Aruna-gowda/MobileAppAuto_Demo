name: Appium Python Mobile Automation

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  setup-run-publish:
    runs-on: macos-latest

    steps:
      # Install dependencies via Homebrew
      - name: Install Homebrew dependencies
        run: |
          # Install Homebrew if not already installed
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          
          # Update Homebrew
          brew update
          
          # Install Android SDK, Java, Node.js, and other required tools
          brew install openjdk@17
          brew install --cask android-sdk
          brew install node

      # Set environment variables for Android SDK and other tools
      - name: Set Environment Variables
        run: |
          # Get the path for Java installation
          JAVA_PATH=$(brew --prefix openjdk@17)
          
          echo "JAVA_HOME=${JAVA_PATH}" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/Library/Android/sdk" >> $GITHUB_ENV
          echo "PATH=$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:${JAVA_PATH}/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" >> $GITHUB_ENV

      # Check for tar installation
      - name: Check tar installation
        run: |
          which tar
          tar --version

      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-python-commons allure-behave

      # Install Appium and related tools via npm
      - name: Install Appium and drivers
        run: |
          npm install -g appium appium-doctor
          appium-doctor --android
          appium-doctor --ios
          appium driver install uiautomator2
          appium driver install xcuitest

      # Set up Android SDK and create Android Emulator
      - name: Set up Android SDK and create Android Emulator
        run: |
          echo "Setting up Android SDK"
          sdkmanager --install "platform-tools" "platforms;android-30" "build-tools;30.0.3"
          sdkmanager --install "system-images;android-30;google_apis;x86_64"
          yes | sdkmanager --licenses
          avdmanager create avd -n test_avd -k "system-images;android-30;google_apis;x86_64" --force
          nohup emulator -avd test_avd -no-snapshot -no-audio -no-window &

      # Set up Xcode simulator
      - name: Set up Xcode Simulator
        run: |
          sudo xcodebuild -license accept
          xcrun simctl boot "iPhone 14" # Booting iPhone simulator

      # Run Appium tests
      - name: Run Appium tests
        run: |
          appium & # Start Appium server
          python -m pytest --alluredir=allure-results # Run tests and store Allure results

      # Generate and store Allure report
      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report
        continue-on-error: true

      # Upload Allure report as an artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report
